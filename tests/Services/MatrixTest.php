<?php

namespace Services;

use MatrixTest\Services\Matrix;
use PHPUnit\Framework\TestCase;
use ReflectionClass;
use ReflectionException;

class MatrixTest extends TestCase
{
    protected string $class = Matrix::class;

    public function testGetRank()
    {
        $testData = [
            [
                [
                    [0]
                ], 0
            ],
            [
                [
                    [1]
                ], 1
            ],
            [
                [
                    [2]
                ], 1
            ],
            [
                [
                    [-2]
                ], 1
            ],
            [
                [
                    [1, 2, 3],
                    [2, 3, 4],
                    [3, 4, 5],
                ], 2
            ],
            [
                [
                    [1, 3, -1],
                    [0, 1, 7],
                ], 2
            ],
            [
                [
                    [1, 2, 1],
                    [-2, -3, 1],
                    [3, 5, 0],
                ], 2
            ],
            [
                [
                    [0, 3, -6, 6, 4, -5],
                    [3, -7, 8, -5, 8, 9],
                    [3, -9, 12, -9, 6, 15],
                ], 3
            ],
            [
                [
                    [0, 2, 8, -7],
                    [2, -2, 4, 0],
                    [-3, 4, -2, -5],
                ], 3
            ],
            [
                [
                    [1, -2, 3, 9],
                    [-1, 3, 0, -4],
                    [2, -5, 5, 17],
                ], 3
            ],
            [
                [
                    [1, 0, -2, 1, 0],
                    [0, -1, -3, 1, 3],
                    [-2, -1, 1, -1, 3],
                    [0, 3, 9, 0, -12],
                ], 3
            ],
            [
                [
                    [1, 1, 4, 1, 2],
                    [0, 1, 2, 1, 1],
                    [0, 0, 0, 1, 2],
                    [1, -1, 0, 0, 2],
                    [2, 1, 6, 0, 1],
                ], 3
            ],
            [
                [
                    [1, 2, 0, -1, 1, -10],
                    [1, 3, 1, 1, -1, -9],
                    [2, 5, 1, 0, 0, -19],
                    [3, 6, 0, 0, -6, -27],
                    [1, 5, 3, 5, -5, -7],
                ], 3
            ],
            [
                [
                    [-4, 3, 1, 5, -8],
                    [6, 0, 9, 2, 6],
                    [-1, 4, 4, 0, 2],
                    [8, -1, 3, 4, 0],
                    [5, 9, -7, -7, 1],
                ], 5
            ],
            [
                [
                    [4, 7],
                    [2, 6],
                ], 2
            ],
            [
                [
                    [4, 3],
                    [3, 2],
                ], 2
            ],
            [
                [
                    [1, 2],
                    [3, 4],
                ], 2
            ],
            [
                [
                    [1, 2, 3],
                    [0, 4, 5],
                    [1, 0, 6],
                ], 3
            ],
            [
                [
                    [7, 2, 1],
                    [0, 3, -1],
                    [-3, 4, -2],
                ], 3
            ],
            [
                [
                    [3, 6, 6, 8],
                    [4, 5, 3, 2],
                    [2, 2, 2, 3],
                    [6, 8, 4, 2],
                ], 4
            ],
            [
                [
                    [0, 0],
                    [0, 1],
                ], 1
            ],
            [
                [
                    [1, 1, 1, 1, 1],
                    [0, 1, 1, 1, 1],
                    [0, 0, 0, 0, 1],
                ], 3
            ],
            [
                [
                    [0, 0],
                    [1, 1],
                    [-1, 0],
                    [0, -1],
                    [0, 0],
                    [0, 0],
                    [0, 0],
                    [0, 0],
                    [1, 1],
                ], 2
            ],
            [
                [
                    [1, 2, 3, 4, 3, 1],
                    [2, 4, 6, 2, 6, 2],
                    [3, 6, 18, 9, 9, -6],
                    [4, 8, 12, 10, 12, 4],
                    [5, 10, 24, 11, 15, -4],
                ], 3
            ],
            [
                [
                    [1, 2, 3, 4, 3, 1],
                    [2, 4, 6, 2, 6, 2],
                    [3, 6, 18, 9, 9, -6],
                    [4, 8, 12, 10, 12, 4],
                    [5, 10, 24, 11, 15, -4]
                ], 3
            ],
            [
                [
                    [0, 1],
                    [1, 2],
                    [0, 5],
                ], 2
            ],
            [
                [
                    [1, 0, 1, 0, 1, 0],
                    [1, 0, 1, 0, 0, 1],
                    [1, 0, 0, 1, 1, 0],
                    [1, 0, 0, 1, 0, 1],
                    [0, 1, 0, 1, 1, 0],
                    [0, 1, 0, 1, 0, 1],
                    [0, 1, 1, 0, 1, 0],
                    [0, 1, 1, 0, 0, 1],
                ], 4
            ],
        ];
        foreach ($testData as $index => $testDataItem) {
            $this->assertEquals($testDataItem[1], (new $this->class($testDataItem[0]))->getRank(),
                'Test failed index: ' .
                $index);
        }
    }

    /**
     * @throws ReflectionException
     */
    public function testIamNotUsingForCycle()
    {
        $fileName = (new ReflectionClass($this->class))->getFileName();
        $content = file_get_contents($fileName);
        $this->assertFalse(preg_match('/for\s*\(/i', $content), 'Still using for :(');
    }
}
